# read in simulation summaries
summary_df <- read.table("processed/sim_summary.txt.gz", h = T)
head(sum_df)
head(summary_df)
sum_df %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, treatment, rep)
library("tidyverse")
sum_df %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, treatment, rep)
summary_df  %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, treatment, rep)
summary_df  %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, treatment, rep) %>%
summarise(p1_home_percent_diff = p1_home_percent[1] - p1_home_percent[2],
p2_home_percent_diff = p2_home_percent[1] - p2_home_percent[2],
fit_dif_diff = fit_dif[1] - fit_dif[2])
summary_df  %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, rep) %>%
summarise(p1_home_percent_diff = p1_home_percent[1] - p1_home_percent[2],
p2_home_percent_diff = p2_home_percent[1] - p2_home_percent[2],
fit_dif_diff = fit_dif[1] - fit_dif[2])
View(summary_df)
summary_df %>%
filter(ne == 10, m == 0.01, div_sel_n == 100, div_sel_s == 0.004, mu == 1e-07, delta == 0.01, rep == 1)
summary_df %>%
filter(ne == 100, m == 0.01, div_sel_n == 100, div_sel_s == 0.004, mu == 1e-07, delta == 0.01, rep == 1)
summary_df %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, seed, rep)
summary_df %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, seed, rep) %>% View
summary_df %>%
filter(phase != "burn_in") %>%
filter(ne == 100, m == 0.01, div_sel_n == 100, div_sel_s == 0.004, mu == 1e-07, delta == 0.01, rep == 1) %>% View
summary_df %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, rep)
summary_df %>%
filter(phase != "burn_in") %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, rep)  %>%
tally
# process simulation output
# aggregates + compresses replicates
# plots
library("tidyverse")
library("parallel")
# location of output files (folder)
out_folder <- "output/output"
# locate the folder of output files
out_files <- list.files(out_folder)
# parse the output file names into a data frame
# "output_chosen_k_chosen_m_burn_in_gen_chosen_div_n_chosen_div_s_chosen_bdm_n_chosen_bdm_s_chosen_mutation_rate_$chosen_delta_rep.txt"
parse_output_filenames <- function(file_name){
x <- strsplit(file_name, "_") %>% data.frame %>% t %>% data.frame
names(x) <- c("slug","ne", "m", "burn_in_gen", "div_n", "div_s", "bdm_n", "bdm_s", "mu", "delta", "rep")
x$rep <- gsub(".txt", "", x$rep)
row.names(x) <- NULL
x <- x[,c(2:11)]
data.frame(x, file_name)
}
# create unique parameter strings for each param set
out_df <- lapply(out_files, parse_output_filenames)
out_df <- bind_rows(out_df)
out_df <- out_df %>%
mutate(param_string = paste(ne, m , burn_in_gen, div_n, div_s, bdm_n, bdm_s, mu, delta, sep  = "_"))
# a list of all unique param strings
unique_param_strings <- out_df$param_string
# a robust function for parsing the outout of our slim simulations
# handles errors when necessary
safe_read_sim_output <- function(x){
# grep the out1 and read as data frame
# TBD: out2
call_string <- paste0("grep OUT1 ", x)
out1_df <- system(call_string, intern = TRUE) %>% strsplit(split = "\t") %>%
data.frame %>% t %>% data.frame
# prevent processing of incomplete sim
if(length(out1_df) == 15){
row.names(out1_df) <- NULL
names(out1_df) <- c("seed", "treatment", "out_type", "phase", "ne", "m",
"burn_in_gens", "div_sel_n", "div_sel_s", "mu", "delta",
"p1_home_percent", "p2_home_percent", "fit_dif", "rep")
out1_df
}
}
# function for aggregating multiple reps into single file per param set
summarise_simulation_output <- function(current_param_string){
# subset of out files that match the query parameter string
param_df <- out_df %>%
filter(param_string == current_param_string)
# join the files into a single data frame
file_names <- paste0(out_folder, param_df$file_name)
# read in sim files, silently ignoring incomplete runs
sim_df <- lapply(file_names, safe_read_sim_output)
sim_df <- bind_rows(sim_df)
sim_df$param_string <- current_param_string
sim_df
}
# apply the function over all sets
sim_summary <- lapply(unique_param_strings, summarise_simulation_output)
#sim_summary <- mclapply(unique_param_strings, summarise_simulation_output, mc.cores = 20)
sim_summary <- bind_rows(sim_summary)
write.table(sim_summary, file = gzfile("processed/sim_summary.txt.gz"), row.names = FALSE, quote = FALSE)
# process simulation output
# aggregates + compresses replicates
# plots
library("tidyverse")
library("parallel")
# location of output files (folder)
out_folder <- "output/output/"
# locate the folder of output files
out_files <- list.files(out_folder)
# parse the output file names into a data frame
# "output_chosen_k_chosen_m_burn_in_gen_chosen_div_n_chosen_div_s_chosen_bdm_n_chosen_bdm_s_chosen_mutation_rate_$chosen_delta_rep.txt"
parse_output_filenames <- function(file_name){
x <- strsplit(file_name, "_") %>% data.frame %>% t %>% data.frame
names(x) <- c("slug","ne", "m", "burn_in_gen", "div_n", "div_s", "bdm_n", "bdm_s", "mu", "delta", "rep")
x$rep <- gsub(".txt", "", x$rep)
row.names(x) <- NULL
x <- x[,c(2:11)]
data.frame(x, file_name)
}
# create unique parameter strings for each param set
out_df <- lapply(out_files, parse_output_filenames)
out_df <- bind_rows(out_df)
out_df <- out_df %>%
mutate(param_string = paste(ne, m , burn_in_gen, div_n, div_s, bdm_n, bdm_s, mu, delta, sep  = "_"))
# a list of all unique param strings
unique_param_strings <- out_df$param_string
# a robust function for parsing the outout of our slim simulations
# handles errors when necessary
safe_read_sim_output <- function(x){
# grep the out1 and read as data frame
# TBD: out2
call_string <- paste0("grep OUT1 ", x)
out1_df <- system(call_string, intern = TRUE) %>% strsplit(split = "\t") %>%
data.frame %>% t %>% data.frame
# prevent processing of incomplete sim
if(length(out1_df) == 15){
row.names(out1_df) <- NULL
names(out1_df) <- c("seed", "treatment", "out_type", "phase", "ne", "m",
"burn_in_gens", "div_sel_n", "div_sel_s", "mu", "delta",
"p1_home_percent", "p2_home_percent", "fit_dif", "rep")
out1_df
}
}
# function for aggregating multiple reps into single file per param set
summarise_simulation_output <- function(current_param_string){
# subset of out files that match the query parameter string
param_df <- out_df %>%
filter(param_string == current_param_string)
# join the files into a single data frame
file_names <- paste0(out_folder, param_df$file_name)
# read in sim files, silently ignoring incomplete runs
sim_df <- lapply(file_names, safe_read_sim_output)
sim_df <- bind_rows(sim_df)
sim_df$param_string <- current_param_string
sim_df
}
# apply the function over all sets
sim_summary <- lapply(unique_param_strings, summarise_simulation_output)
# a list of all unique param strings
unique_param_strings <- unique(out_df$param_string)
unique_param_strings
# apply the function over all sets
sim_summary <- lapply(unique_param_strings, summarise_simulation_output)
library("tidyverse")
summary_df <- read.table("processed/sim_summary.txt.gz", h = T)
# spike in the bdm_n and bdm_s parameters
# param string: ne, m , burn_in_gen, div_n, div_s, bdm_n, bdm_s, mu, delta
summary_df <- summary_df %>%
mutate(bdm_n = strsplit(as.character(param_string), split = "_") %>% unlist %>% .[6]) %>%
mutate(bdm_s = strsplit(as.character(param_string), split = "_") %>% unlist %>% .[7])
# not interested in burn in phase
summary_df <- summary_df %>%
filter(phase != "burn_in")
sum_df <- summary_df  %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, bdm_n, bdm_s, seed, rep) %>%
summarise(p1_home_percent_diff = p1_home_percent[1] - p1_home_percent[2],
p2_home_percent_diff = p2_home_percent[1] - p2_home_percent[2],
fit_dif_diff = fit_dif[1] - fit_dif[2])
# plot some results
summary_df %>%
mutate(ne_m = ne*m) %>%
ggplot(aes(y = p1_home_percent, x = as.factor(delta), color = as.factor(treatment)))+
geom_boxplot()+
facet_grid(ne_m ~ div_sel_s)
sum_df %>%
ggplot(aes(y = p1_home_percent_diff, x = delta, fill = delta))+
geom_boxplot()+
facet_grid(ne*m ~ mu)
summary_df %>%
mutate(ne_m = ne*m) %>%
ggplot(aes(y = p1_home_percent, x = as.factor(delta), color = as.factor(treatment)))+
geom_boxplot()+
facet_grid(ne_m ~ div_sel_s)
summary_df %>%
mutate(ne_m = ne*m) %>%
ggplot(aes(y = p1_home_percent, x = as.factor(delta), color = as.factor(treatment)))+
geom_boxplot()+
facet_grid(ne*m ~ div_sel_s)
sum_df %>%
ggplot(aes(y = p1_home_percent_diff, x = delta, group = delta))+
geom_boxplot()+
facet_grid(ne*m ~ mu)
sum_df %>% head()
sum_df %>% filter(bdm_s == 0.001) %>%
ggplot(aes(y = p1_home_percent_diff, x = delta, group = delta))+
geom_boxplot()+
facet_grid(ne*m ~ mu)
summary_df %>%
mutate(ne_m = ne*m) %>%
ggplot(aes(y = p1_home_percent, x = as.factor(delta), color = as.factor(treatment)))+
geom_boxplot()+
facet_grid(ne*m ~ div_sel_s)
sum_df %>% filter(bdm_s == 0.001) %>%
ggplot(aes(y = p1_home_percent_diff, x = delta, group = delta))+
geom_violin()+
facet_grid(ne*m ~ mu)
summary_df %>%
mutate(ne_m = ne*m) %>%
ggplot(aes(y = p1_home_percent, x = as.factor(delta), color = as.factor(treatment)))+
geom_boxplot()+
facet_grid(ne*m ~ div_sel_s)
sum_df %>% filter(bdm_s == 0.001) %>%
ggplot(aes(y = p1_home_percent_diff, x = delta, group = delta))+
geom_violin()+
facet_grid(ne*m ~ div_sel_s)
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = p1_home_percent_diff, x = delta, group = delta))+
geom_violin()
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = p1_home_percent_diff, x=p1_home_percent, color = delta, group = delta))+
geom_violin()
head(sum_df)
summary_df %>%
mutate(ne_m = ne*m) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = p1_home_percent, x = as.factor(delta), color = as.factor(treatment)))+
geom_boxplot()+
facet_grid(ne*m ~ div_sel_s)
summary_df %>%
mutate(ne_m = ne*m) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.01) %>%
ggplot(aes(y = p1_home_percent, x = as.factor(delta), color = as.factor(treatment)))+
geom_boxplot()+
facet_grid(ne*m ~ div_sel_s)
summary_df %>%
mutate(ne_m = ne*m) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.05) %>%
ggplot(aes(y = p1_home_percent, x = as.factor(delta), color = as.factor(treatment)))+
geom_boxplot()+
facet_grid(ne*m ~ div_sel_s)
head(summary_df)
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(p1_home_percent_diff, fill = delta, group = delta))+
geom_density()
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(p1_home_percent_diff, fill = delta, group = delta),alpha=0.5)+
geom_density()
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(p1_home_percent_diff, fill = delta, group = delta),alpha=0.5)+
geom_density() + facet_wrap(~delta)
summary_df
head(summary_df)
sum_df <- summary_df  %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, bdm_n, bdm_s, seed, rep) %>%
summarise(p1_home_percent_diff = p1_home_percent[1] - p1_home_percent[2],
p2_home_percent_diff = p2_home_percent[1] - p2_home_percent[2],
fit_dif_diff = fit_dif[1] - fit_dif[2],
control_p1_home_percent = p1_home_percent[2])
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = control_p1_home_percent_diff, x = delta, group = delta))+
geom_violin()
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = control_p1_home_percent, x = delta, group = delta))+
geom_violin()
summary_df <- read.table("processed/sim_summary.txt.gz", h = T)
# spike in the bdm_n and bdm_s parameters
# param string: ne, m , burn_in_gen, div_n, div_s, bdm_n, bdm_s, mu, delta
summary_df <- summary_df %>%
mutate(bdm_n = strsplit(as.character(param_string), split = "_") %>% unlist %>% .[6]) %>%
mutate(bdm_s = strsplit(as.character(param_string), split = "_") %>% unlist %>% .[7])
summary_df %>% head()
sum_df <- summary_df  %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, bdm_n, bdm_s, seed, rep) %>%
summarise(p1_home_percent_diff = p1_home_percent[2] - p1_home_percent[3],
p2_home_percent_diff = p2_home_percent[2] - p2_home_percent[3],
fit_dif_diff = fit_dif[2] - fit_dif[3],
pre_fit_dif = fit_dif[1])
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = pre_fit_dif, x = delta, group = delta))+
geom_violin()
sum_df <- summary_df  %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, bdm_n, bdm_s, seed, rep) %>%
summarise(p1_home_percent_diff = p1_home_percent[2] - p1_home_percent[3],
p2_home_percent_diff = p2_home_percent[2] - p2_home_percent[3],
fit_dif_diff = fit_dif[2] - fit_dif[3],
pre_fit = fit_dif[1],
test_post_fit =fit_dif[2],
control_post_fit = fit_dif[3])
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = pre_fit_dif, x = test_post_fit, color = delta))+
geom_violin()
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = pre_fit, x = test_post_fit, color = delta))+
geom_point()
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = control_post_fit, x = test_post_fit, color = delta))+
geom_point()
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = control_post_fit, x = test_post_fit, color = delta))+
geom_point() +
geom_abline(slope=1)
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
filter(pre_fit > 0.4) %>%
ggplot(aes(p1_home_percent_diff, fill = delta, group = delta),alpha=0.5)+
geom_density() + facet_wrap(~delta)
facet_grid(ne*m ~ div_sel_s)
sum_df %>% filter(bdm_s == 0.001) %>%
#filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = control_post_fit, x = test_post_fit, color = delta))+
geom_point() +
geom_abline(slope=1) +
facet_grid(ne*m ~ div_sel_s)
sum_df <- summary_df  %>%
group_by(ne, m, div_sel_n, div_sel_s, mu, delta, bdm_n, bdm_s, seed, rep) %>%
summarise(p1_home_percent_diff = p1_home_percent[2] - p1_home_percent[3],
p2_home_percent_diff = p2_home_percent[2] - p2_home_percent[3],
fit_dif_diff = fit_dif[2] - fit_dif[3],
pre_fit = fit_dif[1],
test_post_fit =fit_dif[2],
control_post_fit = fit_dif[3],
pre_p1 = p1_home_percent[1],
test_post_p1 = p1_home_percent[2],
control_post_p1 = p1_home_percent[3])
sum_df %>% filter(bdm_s == 0.001) %>%
#filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = control_post_p1, x = test_post_p1, color = delta))+
geom_point() +
geom_abline(slope=1) +
facet_grid(ne*m ~ div_sel_s)
?facet_grid
sum_df %>% filter(bdm_s == 0.001) %>%
#filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = control_post_p1, x = test_post_p1, color = delta))+
geom_point() +
geom_abline(slope=1) +
facet_grid(ne*m ~ div_sel_s, labeller = label_both)
sum_df %>% filter(bdm_s == 0.001) %>%
#filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
ggplot(aes(y = control_post_p1, x = test_post_p1, color = delta))+
geom_point(alpha=0.5) +
geom_abline(slope=1) +
facet_grid(ne*m ~ div_sel_s, labeller = label_both) +
theme_bw()
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
filter(pre_fit > 0.4) %>%
ggplot(aes(p1_home_percent_diff, fill = delta, group = delta))+
geom_density() + facet_wrap(~delta)
sum_df %>% filter(bdm_s == 0.001) %>%
filter(div_sel_s == 0.008, ne==1000, m==0.1) %>%
filter(pre_fit > 0.4) %>%
ggplot(aes(p1_home_percent_diff, fill = delta, group = delta))+
geom_density() + facet_wrap(~delta, labeller = label_both) +
theme_bw()
library(tidyverse)
