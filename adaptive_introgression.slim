initialize() {

	initializeSLiMModelType("nonWF"); 
	
	// ******************************
	// Simulation parameters
	// ******************************
	
	defineConstant("initial_pop_size", 500); // initial population size
	defineConstant("K", 500); // carrying capacity (per subpopulation)
	defineConstant("pheno_opt2", 10.0); // the final optimum (starts at 0, moves to opt2)
	defineConstant("m", 0.01);   // the bidirectional migration rate
	defineConstant("ri", 0.4); // the selection coefficient for RI alleles
	defineConstant("ri_loci", (1:10*9000)-1); // the positions of the RI loci in both populations
	defineConstant("delta", 0.001); // the per-generation change in selective optimum (TBD)
	
	// ******************************
	// Mutation types
	// ******************************
	
	initializeMutationType("m1", 0.5, "n", 0.0, 0.0);  // Reproductive isolation (deleterious in p2)
	initializeMutationType("m2", 0.5, "n", 0.0, 0.0);  // Reproductive isolation (deleterious in p1)
	initializeMutationType("m3", 0.5, "n", 0.0, 1.0);  // Environmentally sensitive QTL (adaptative everywhere)
	initializeMutationType("m4", 0.5, "f", 0.0);  // a neutral allele
	
	// colors, for use in SLiMGui
	m1.color = "blue";
	m2.color = "green";
	m3.color = "red";
	m4.color = "grey40";
	
	// ******************************
	// Genome properties
	// ******************************

	//initializeGenomicElementType("g1", c(m1,m2,m3,m4),  c(0.25,0.25,0.25,0.25)); // only QTL alleles arise from mutations
	initializeGenomicElementType("g1", c(m1,m2,m3,m4),  c(0.0,0.0,0.5,0.5)); // only QTL alleles arise from mutations

	
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-8);
}

reproduction() {
	subpop.addCrossed(individual, subpop.sampleIndividuals(1));
	return NULL;
}

1 early() {
	
	// ******************************
	// Initialize populations
	// ******************************
	
	sim.addSubpop("p1", initial_pop_size);
	sim.addSubpop("p2", initial_pop_size);
	
	// ******************************
	// Initialize RI
	// ******************************
	
	// the positions of the RI alleles (same in both pops, for now)
	// ri_loci = (1:10*10000)-1;

	// place each adaptive allele in both populations
	
	// TRY COMMENTING OUT THIS SECTION -- >
	
	for (i in ri_loci){
	 
		p1.individuals.genomes.addNewDrawnMutation(m1, i); 
		
	}
	
	// offset the RI locus by 100 in pop2 (for easier visualization)
	
	for (i in ri_loci){
	 
		p2.individuals.genomes.addNewDrawnMutation(m2, i); 
		
	}
	
	// <-- TRY COMMENTING OUT THIS SECTION
	

}

early() {

	// ************************************************************
	// p1: QTL-based fitness for the environmentally-sensitive alleles
	// ************************************************************
	
	p1_inds = p1.individuals;
	phenotypes = p1_inds.sumOfMutationsOfType(m3);
	ri_pheno = p1_inds.countOfMutationsOfType(m2) * ri; 
	phenotypes = phenotypes - ri_pheno; // ri discounts phenotype by # ri alleles x ri multiplier
	optimum = (sim.generation/5000) * pheno_opt2; // optimum gradually moves to opt2
	deviations = optimum - phenotypes;
	fitnessFunctionMax = dnorm(0.0, 0.0, 5.0);
	adaptation = dnorm(deviations, 0.0, 5.0) / fitnessFunctionMax;
	p1_inds.fitnessScaling = 0.1 + adaptation *  0.9 ;	
	p1_inds.tagF = phenotypes; 
	p1_inds.x = asFloat(mean(ri_pheno)); // the average RI discount (load) for the population
	
	// ************************************************************
	// p2: QTL-based fitness for the environmentally-sensitive alleles
	// ************************************************************
	
	p2_inds = p2.individuals;
	phenotypes = p2_inds.sumOfMutationsOfType(m3);
	ri_pheno = p2_inds.countOfMutationsOfType(m1) * ri; 
	phenotypes = phenotypes - ri_pheno; // ri discounts phenotype
	optimum = (sim.generation/5000) * pheno_opt2; // optimum gradually moves to opt2
	deviations = optimum - phenotypes;
	fitnessFunctionMax = dnorm(0.0, 0.0, 5.0);
	adaptation = dnorm(deviations, 0.0, 5.0) / fitnessFunctionMax;
	p2_inds.fitnessScaling = 0.1 + adaptation *  0.9 ;	
	p2_inds.tagF = phenotypes; 	
	p2_inds.x = asFloat(mean(ri_pheno)); // the average RI discount (load) for the population  

	// ******************************
	// Density-dependence
	// ******************************
	
	p1.fitnessScaling = min(K / p1.individualCount, 1.5);
	p2.fitnessScaling = min(K / p2.individualCount, 1.5);
	
	// ******************************
	// Migration
	// ******************************
	
	// p1 -> p2
	p1_to_p2_n_migrants = asInteger(round(p2.individualCount * m)); // p2 takes from p1 based on pop size of p2
	//catn(p1_to_p2_n_migrants + " p1->p2");
	p1_to_p2_migrants = sample(p1.individuals, p1_to_p2_n_migrants);
	p2.takeMigrants(p1_to_p2_migrants);
	
	// p2 -> p1
	p2_to_p1_n_migrants = asInteger(round(p1.individualCount * m)); // p1 takes from p2 based on pop size of p1
	//catn(p2_to_p1_n_migrants + " p2->p1");
	p2_to_p1_migrants = sample(p2.individuals, p2_to_p1_n_migrants);
	p1.takeMigrants(p2_to_p1_migrants);
	


}

// ******************************
// Fitness callbacks
// ******************************

fitness(m3) { return 1.0; }

//fitness(m1) { return 0.0; }
//fitness(m2) { return 0.0; }

//fitness(m1, p1) { return 0.0; }
//fitness(m2, p2) { return 0.0; }

late() {

	// ******************************
	// Print information about run.
	// ******************************
	
	if ((p1.individualCount == 0) | (p2.individualCount == 0))
	{
		// stop at extinction
		if (p1.individualCount == 0) 
		{
			catn("Pop 1 extinction in generation " + sim.generation + ".");
		} else
		{
			catn("Pop 2 extinction in generation " + sim.generation + ".");
		}
		sim.simulationFinished();
	}
	else
	{
		if (sim.generation % 100 == 0)
		{
		
			phenotypes1 = p1.individuals.tagF;
			phenotypes2 = p2.individuals.tagF;
			ri_1 = p1.individuals.x;
			ri_2 = p2.individuals.x;
			
			// output the phenotypic mean and pop size
		
			cat(sim.generation + ": " + p1.individualCount + ":" + p2.individualCount + " individuals");
			catn();
			
			catn("p1 pheno:" + mean(phenotypes1) + " ri_load:" + mean(ri_1));
			catn("p2 pheno: " + mean(phenotypes2)+ " ri_load:" + mean(ri_2));
			
		catn();
		}
	}
}

5000 late() { sim.simulationFinished(); }
