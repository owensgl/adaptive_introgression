initialize() {

	// ******************************
	// Core simulation parameters
	// ******************************
	
	defineConstant("chr_size", 99999); // the total length of the chromosome
	defineConstant("pop_size", 400); // initial population size for p1 and p2
	defineConstant("m", 0.01);   // the bidirectional migration rate
	defineConstant("delta", 0.001); // the per-generation change in selective optimum
	defineConstant("initial_optimum", 0.0); // the (initial) phenotypic optimum
	defineConstant("qtl_effect_size", 0.2); // the *phenotypic* effect size of the QTL alleles
	initializeMutationRate(1.5e-7);
	initializeRecombinationRate(1e-8);
	
	// ******************************
	// Burn-in parameters
	// ******************************
	
	defineConstant("burn_in_generations", 4000); // the number of burn-in generations (not yet implemented)
	defineConstant("burn_in_fluct_period", 1000); // no. generations between changes in optimum
	defineConstant("burn_in_optimum", 5.0); // the amplitude of the burn-in flucation (opt1 = +, opt2 = -)
	
	// ******************************
	// BDM location parameters
	// ******************************
	
	defineConstant("max_ri", 1.0); // the maximum possible reduction in fitness due to RI (1 > max_ri > 0)
	defineConstant("bdm_n",  10); // the number of bdm_loci (minimum 2)
	defineConstant("bdm_s", (max_ri/bdm_n)/2); // the proportion of RI caused by each bdm allele
	defineConstant("bdm_arch","clustered"); // whether the bdm_loci are clumped or spread out.
	
	// parameters for 'clustered' architectures
	defineConstant("cluster_proportion", 4); // the size of the cluster, 1 = whole chromosome, 2 = half, 3 = third, etc.
	defineConstant("cluster_size", integerDiv(chr_size, cluster_proportion)); // the size of the BDM cluster, in bp
	defineConstant("cluster_start", integerDiv(chr_size, 2) - integerDiv(chr_size, cluster_proportion*2)); // the starting locus of the cluster
	
	if (bdm_arch == "diffuse"){
	
		defineConstant("bdm_loci", c(1:bdm_n) * integerDiv(chr_size, (bdm_n+1))); 
		
	} else if (bdm_arch == "clustered"){
				
		defineConstant("bdm_loci", c(1:bdm_n) * integerDiv(cluster_size, (bdm_n+1)) + cluster_start); // define the bdm loci

	}
	
	// ******************************
	// BDM pairwise locus assignments
	// ******************************
	
	// shuffles a vector of 0:bdm_n
	// each pair = index the shuffled vector by 2s (done at fitness step)
	// e.g. 0 1 2 3 -> 3 0 1 2, pairs are locus 3 and locus 0; locus 1 and 2

	bdm_pairs_tmp = sample(0:(bdm_n-1), 10);
	cat("BDM pairs: " + paste(bdm_pairs_tmp) + "\n");
	defineConstant("bdm_pairs", bdm_pairs_tmp);
	
	// ******************************
	// Mutation types
	// ******************************
	
	scriptForQTLs = paste(c("if (runif(1) < 0.5) -", qtl_effect_size, "; else ",qtl_effect_size ,";"), sep = ""); // binary QTL alleles
	initializeMutationType("m1", 0.5, "s", scriptForQTLs);  // Environmentally-sensitive QTL 
	initializeMutationType("m2", 0.5, "f", 0.0);  // a neutral allele
	initializeMutationType("m3", 0.5, "f", 0.0);  // The BDM allele in p1 
	initializeMutationType("m4", 0.5, "f", 0.0);  // The BDM allele in p2 

	m1.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;
	
	m1.mutationStackPolicy = "l";
	//m3.mutationStackPolicy = "l";
	//m4.mutationStackPolicy = "l";
	
	// colors, for use in SLiMGui
	m1.color = "red";
	m2.color = "grey40";
	m3.color = "blue";
	m4.color = "yellow";

   // ******************************
	// Genome properties
	// ******************************

	initializeGenomicElementType("g1", c(m1,m2),  c(0.5,0.5)); // only QTL and neutral alleles mutate in
	initializeGenomicElementType("g2", c(m1,m3,m4),  c(1e-200,0.0,0.0)); // RI loci are static
	
	//define the non-RI regions
			
	for (index in 0:(size(bdm_loci)-1))
	
		if (index == 0){
			initializeGenomicElement(g1, 0, bdm_loci[index]-1);
			initializeGenomicElement(g1, bdm_loci[index]+1, bdm_loci[index+1]-1);
		}
		else if (index == size(bdm_loci)-1)
			initializeGenomicElement(g1, bdm_loci[index]+1, chr_size);
		else
			initializeGenomicElement(g1, bdm_loci[index]+1, bdm_loci[index+1]-1);
	
	// define the RI regions (again, to prevent back-mutations at the RI loci)
	for (index in 0:(size(bdm_loci)-1))
			initializeGenomicElement(g2, bdm_loci[index], bdm_loci[index]);

}

1 early() {

	//initialize subpopulations
	sim.addSubpop("p1", pop_size);
	sim.addSubpop("p2", pop_size);
	
	// initialize migration rates
	p1.setMigrationRates(p2, m);   
	p2.setMigrationRates(p1, m); 
	
	// add in BDM alleles
	for (i in bdm_loci){
	
	 	p1.individuals.genomes.addNewDrawnMutation(m3, i);
		p2.individuals.genomes.addNewDrawnMutation(m4, i);
				
	}
	
}

1: late() {

	// ***************************************************************
	// QTL-based phenotypes for the environmentally-sensitive alleles
	// ***************************************************************
	
	inds = sim.subpopulations.individuals;
	phenotypes = inds.sumOfMutationsOfType(m1);
	inds.x = phenotypes; 
	
	
}

fitness(m1) {
	// the QTLs themselves are neutral; their effect is handled below (NULL callback)
	return 1.0;
}

fitness(m3) {
	// the p1 BDMs themselves are neutral; their effect is handled below 
	return 1.0;
}

fitness(m4) {
	// the p2 BDMs themselves are neutral; their effect is handled below 
	return 1.0;		
}

fitness(NULL) {

	// ***************************************************************
	// QTL-based fitness for environmentally-sensitive alleles
	// ***************************************************************
	
	// if in the burn in period, compute optimum based on burn in fluctations
	
	if (sim.generation <= burn_in_generations){
		
		// cosine with 1/2 period = burn_in_fluct_period, amplitude = burn_in_optimum
		current_optimum = cos(sim.generation/(3.14159 * (burn_in_fluct_period/10))) * burn_in_optimum;
	
	} else{
		
		current_optimum = initial_optimum + delta * sim.generation;
	}
	
	// the fitness of this individual, based on the current optimum
	qtl_fitness = dnorm(current_optimum - individual.x, 0.0, 5.0);
	
	//if (sim.generation % 100 == 0){
	//cat("Phenotype =" + individual.x + ". Optimum="  +current_optimum  +"\n");
	//}
	
	
	
	// ***************************************************************
	// BDM pairwise negative epistasis
	// ***************************************************************
	
	// initialize fitness pairwise fitness penalities at 0
	negative_epistasis = rep(0.0, bdm_n);
	
	// where are the p1 and p2 bdm *alleles* in each genome?
	p1_bdm_locations = c(genome1.positionsOfMutationsOfType(m3), genome2.positionsOfMutationsOfType(m3));
	p2_bdm_locations = c(genome1.positionsOfMutationsOfType(m4), genome2.positionsOfMutationsOfType(m4));
	
	// scan each pair of negatively interacting bdm loci (assigned in the starting parameters)
	
	for (i in 0:((bdm_n/2) -1)){
	
		// identify the two negatively interacting loci
		// (indexes the bdm_pairs vector by 2s)
		p1_locus = bdm_loci[bdm_pairs[i*2]];
		p2_locus = bdm_loci[bdm_pairs[i*2 + 1]];
		
		// count the number of BDM alleles in each genome (if any)
		num_p1_alleles = sum(p1_bdm_locations == p1_locus);
		num_p2_alleles = sum(p2_bdm_locations == p2_locus);
		
		// multiply these together to get a 'bdm_genotype'
		bdm_genotype = num_p1_alleles * num_p2_alleles;
		
		// assign a value to the negative epistasis vector 
		// based on the bdm genotype
		// possible values: 0, 1, 2, 4
		// if genotype > 0, assigns penalty based on genotype value
		// otherwise remains at 0 (initial value)

		if(bdm_genotype == 1){
			
			negative_epistasis[i] = bdm_s;
			
		}	else if (bdm_genotype == 2){
		
			negative_epistasis[i] = 1.5 * bdm_s;
		
		}  else if (bdm_genotype == 4){
		
			negative_epistasis[i] = 2 * bdm_s;
		
		} 
		
			
	}
	
	// discount the qtl fitness by the amount of negative epistatsis
	// limted by max_ri 
	return (qtl_fitness * (1-sum(negative_epistasis)));
	
}

1:10000 early() {

	// ***************************************************************
	// Output and console reports
	// ***************************************************************

	if (sim.generation % 100 == 0){
	
	if (sim.generation <= burn_in_generations){
		cat("BURN IN" + "\n");
	}
	
	if (sim.generation <= burn_in_generations){
		
		// cosine with 1/2 period = burn_in_fluct_period, amplitude = burn_in_optimum
		current_optimum = cos(sim.generation/(3.14159 * (burn_in_fluct_period/10))) * burn_in_optimum;
	
	} else{
	
		current_optimum = initial_optimum + delta * sim.generation;
	}
	
	cat("Output for end of generation " + (sim.generation) + ":\n");
	cat("-------------------------------\n");
	
	// Output population fitness values
	cat("p1 mean fitness = " + mean(p1.cachedFitness(NULL)) + "\n");
	cat("p2 mean fitness = " + mean(p2.cachedFitness(NULL)) + "\n");
	
	// print the current optimum
	cat("current phenotypic optimum = " + current_optimum + "\n"); 
	
	// Output population additive QTL-based phenotypes
	cat("p1 mean phenotype = " + mean(p1.individuals.x) + "\n");
	cat("p2 mean phenotype = " + mean(p2.individuals.x) + "\n\n");
	}
	
}
